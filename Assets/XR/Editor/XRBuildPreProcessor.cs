using System;
using System.IO;
using UnityEditor;
using UnityEditor.Build;
#if UNITY_2018_1_OR_NEWER
using UnityEditor.Build.Reporting;
#endif
using UnityEditor.Callbacks;
using UnityEngine;


public class XRBuildPreProcessor :
#if UNITY_2018_1_OR_NEWER
IPreprocessBuildWithReport
#else
IPreprocessBuild
#endif
{

  public int callbackOrder { get { return 0; } }
#if UNITY_2018_1_OR_NEWER
  public void OnPreprocessBuild(BuildReport report) {
    Debug.Log("OnPreprocessBuild for platform " + report.summary.platform);
#else
  public void OnPreprocessBuild(BuildTarget target, string path) {
    Debug.Log("OnPreprocessBuild for platform " + target);
#endif

    // Check that XRController is correctly configured, if applicable.
    CheckXRController();

    CreateAppKeyScript();
  }

  private void CheckXRController() {
    GameObject taggedObj = GameObject.FindWithTag("XRController");
    if (taggedObj) {
      // GameObject with XRController tag exists, next see if it has an XRController script attached
      if (!taggedObj.GetComponent("XRController")) {
        Debug.LogError("XRController game object is missing XRController.cs script");
      }
      return;
    }

    // XRController missing, check to see if any GameObjects have XR*Controller scripts attached
    GameObject prefab = AssetDatabase.LoadAssetAtPath("Assets/XR/Prefabs/XRController.prefab", typeof(GameObject)) as GameObject;
    object[] objects = GameObject.FindObjectsOfType(typeof (GameObject));
    foreach (object o in objects) {
      GameObject g = (GameObject) o;
      if (g.GetComponent("XRCameraController")
        || g.GetComponent("XRLightController")
        || g.GetComponent("XRSurfaceController")
        || g.GetComponent("XRVideoController")
        || g.GetComponent("XRVideoTextureController") ) {
        Debug.LogError("XRController is either missing from your scene, or it's missing XRController tag.", prefab);
        return;
      }
    }
  }

  private void CreateAppKeyScript() {
    var temppath = FileUtil.GetUniqueTempPathInProject();

    string key = XRProjectSettings.MobileAppKey();
    if (key == null) {
      key = "";
    }

    string text =
      "// AUTOGENERATED, DO NOT EDIT\n"
      + "\n"
      + "namespace XRInternal {\n"
      + "namespace XRAutoGenerated {\n"
      + "public class XRMobileAppKey {\n";

      var isAppKeyValid = !String.IsNullOrEmpty(key) && XRProjectSettings.CheckAppKey();
      if (isAppKeyValid) {
        text = text
          + "  // %key% will be replaced with the editor-supplied value on build.\n"
          + "  public const string KEY = \"" + key  + "\";\n";
      }

    text = text
      + "}\n"
      + "}\n"
      + "}\n";

    using (StreamWriter outputFile = new StreamWriter(temppath, true)) {
       outputFile.WriteLine(text);
    }

    FileUtil.ReplaceFile(temppath, "Assets/XR/Scripts/XRMobileAppKey.cs");

    if (!isAppKeyValid) {
      // Throw exception after replacing the app key file to ensure that a previously generated
      // file is not used.
      throw new BuildFailedException("XR app key is not valid for this app's bundle identifier. " +
          "Change it in XR > App Key Settings");
    }
  }
}
